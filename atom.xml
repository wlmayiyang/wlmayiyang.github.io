<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mayiyang</title>
  
  <subtitle>keep solving</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wlmayiyang.github.io/"/>
  <updated>2020-12-27T05:03:39.000Z</updated>
  <id>http://wlmayiyang.github.io/</id>
  
  <author>
    <name>mayiyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wlmayiyang.github.io/2020/12/27/hello-world/"/>
    <id>http://wlmayiyang.github.io/2020/12/27/hello-world/</id>
    <published>2020-12-27T08:42:49.779Z</published>
    <updated>2020-12-27T05:03:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hello"><a href="#Hello" class="headerlink" title="Hello!"></a>Hello!</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>codeforces</title>
    <link href="http://wlmayiyang.github.io/2019/12/07/codeforces/"/>
    <id>http://wlmayiyang.github.io/2019/12/07/codeforces/</id>
    <published>2019-12-07T13:13:59.000Z</published>
    <updated>2020-12-27T09:05:46.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeforces260C"><a href="#codeforces260C" class="headerlink" title="codeforces260C"></a><a href="http://codeforces.com/problemset/problem/260/C" target="_blank" rel="noopener">codeforces260C</a></h1><h2 id="problem-description"><a href="#problem-description" class="headerlink" title="problem description"></a><strong>problem description</strong></h2><blockquote><p>有n个箱子，每个箱子里都有一定数量的球。<br>现在取出某个箱子里的所有球，从后面一个位置开始，依次在后面的箱子里放入一个球，放完为止。若到第n个还没放完，回到第一个继续放。<br>已知放完后所有箱子里球的个数和结束位置，求初始状态。<br><strong>data limit</strong> $2&lt;=n&lt;=1e5,1&lt;=x&lt;=n,0&lt;=a[i]&lt;=1e9, a[x]!=0$</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a><strong>solution</strong></h2><p>暴力算法就是从$x$向前扫，当访问数字为zero时停止。<br>由此，想到先取最小值，并全体减去最小值，相当于进行$min \ast n$次<br>最小值位置为开始位置(<strong>注意要选择从x开始第一个扫到的点</strong>)，向前扫即可。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a><strong>code</strong></h2><pre><code class="lang-cpp">    for (int i=0;i&lt;n;++i)    {        a[i]-=MIN;    }    int pos=-1;    for (int i=x;;--i)    {        if (i==-1) i+=n;        if (a[i]==0)        {            pos=i;            break;        }     }    a[pos]=MIN*n;    for (int i=x;;--i)    {        if (i==-1) i+=n;        if (i==pos) break;        --a[i],++a[pos];    }</code></pre><hr><h1 id="codeforces260D"><a href="#codeforces260D" class="headerlink" title="codeforces260D"></a><a href="http://codeforces.com/problemset/problem/260/D" target="_blank" rel="noopener">codeforces260D</a></h1><h2 id="problem-description-1"><a href="#problem-description-1" class="headerlink" title="problem description"></a><strong>problem description</strong></h2><p>有一颗结点为黑白两色的树，每条边都有权值且连接颜色不同的两个点，每个点的权值等于连接该点的边的权值总和<br>现在给出n个点的颜色和权值，求边的连接情况<br><strong>data limit</strong> $2&lt;=n&lt;=1e5$</p><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a><strong>solution</strong></h2><p><strong>黑点权值总和==白点权值总和</strong><br>对于一个点u，边权小于u的点权；因此两个点u,v边权为点权较小者。<br>$v[0]$保存白点，$v[1]$保存黑点。<br>分别按照点权升序排列，点权最小的必然是叶子<br>要注意<strong>当前点的权值降为零时，要跳到下一个点</strong></p></blockquote><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a><strong>code</strong></h2><pre><code class="lang-cpp">bool cmp(node a,node b){    return a.sum&lt;b.sum;}    sort(v[0].begin(),v[0].end(),cmp);    sort(v[1].begin(),v[1].end(),cmp);    int black=0,white=0;    for (;;)    {        if (black&gt;=v[1].size()) break;        if (white&gt;=v[0].size()) break;        ll val=min(v[1][black].sum,v[0][white].sum);        printf(&quot;%d %d %lld\n&quot;,v[1][black].id,v[0][white].id,val);        v[1][black].sum-=val,v[0][white].sum-=val;        if (white==v[0].size()-1) ++black;        else if (black==v[1].size()-1) ++white;        else if (v[0][white].sum==0) ++white;        else ++black;    }</code></pre><hr><h1 id="codeforces260E"><a href="#codeforces260E" class="headerlink" title="codeforces260E"></a><a href="http://codeforces.com/problemset/problem/260/E" target="_blank" rel="noopener">codeforces260E</a></h1><h2 id="problem-description-2"><a href="#problem-description-2" class="headerlink" title="problem description"></a><strong>problem description</strong></h2><p>给定平面上n个点和9个数，求两条平行于x轴的直线和两条平行于y轴的直线，使得被直线分成的9个区域中，点的数量和给定的9个数对应</p><h2 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>先把点<strong>行优先</strong>排序。<br>next_permutation枚举9个数在9个区域的排列，$check$过程如下：<br>1.先算出4条线坐标；<br>2.用<strong>线段树</strong>维护<strong>纵坐标</strong>（维护<strong>$l-r$所有点</strong>的纵坐标），每次check时在<strong>一定区间内二分</strong>，统计个数</p></blockquote><h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a><strong>code</strong></h2><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=100005;int n,num[10],x[2],y[2];struct node{    int x,y;}a[N],b[N];vector &lt;int&gt; seg[N&lt;&lt;2];bool cmp(node a,node b){    if (a.x==b.x) return a.y&lt;b.y;    return a.x&lt;b.x;}bool cnp(node a,node b){    if (a.y==b.y) return a.x&lt;b.x;    return a.y&lt;b.y;}void build(int x,int l,int r){    for (int i=l;i&lt;=r;++i)    {        seg[x].push_back(a[i].y);    }//维护l--r所有点的纵坐标    sort(seg[x].begin(),seg[x].end());    if (l==r)    {        return;    }    int m=(l+r)&gt;&gt;1;    build(x+x,l,m);    build(x+x+1,m+1,r);}int query(int x,int l,int r,int L,int R,int limit){    if (L&lt;=l&amp;&amp;r&lt;=R)    {        return upper_bound(seg[x].begin(),seg[x].end(),limit)-seg[x].begin();    }    int m=(l+r)&gt;&gt;1,ans=0;    if (L&lt;=m) ans+=query(x+x,l,m,L,R,limit);    if (R&gt;m) ans+=query(x+x+1,m+1,r,L,R,limit);    return ans;}void init(){    scanf(&quot;%d&quot;,&amp;n);    for (int i=1;i&lt;=n;++i)    {        scanf(&quot;%d%d&quot;,&amp;a[i].x,&amp;a[i].y);        b[i]=a[i];    }    sort(a+1,a+n+1,cmp);    sort(b+1,b+n+1,cnp);    for (int i=1;i&lt;=9;++i)    {        scanf(&quot;%d&quot;,&amp;num[i]);    }    build(1,1,n);    sort(num+1,num+10);}void check(){    int p1=num[1]+num[2]+num[3];    int p2=num[1]+num[2]+num[3]+num[4]+num[5]+num[6];    int q1=num[1]+num[4]+num[7];    int q2=num[1]+num[2]+num[4]+num[5]+num[7]+num[8];    if (a[p1].x==a[p1+1].x) return;    x[0]=a[p1].x;    if (a[p2].x==a[p2+1].x) return;    x[1]=a[p2].x;    if (b[q1].y==b[q1+1].y) return;    y[0]=b[q1].y;    if (b[q2].y==b[q2+1].y) return;    y[1]=b[q2].y;    if (query(1,1,n,1,p1,y[0])!=num[1]) return;    if (query(1,1,n,1,p1,y[1])!=num[1]+num[2]) return;    if (query(1,1,n,1,p2,y[0])!=num[1]+num[4]) return;    if (query(1,1,n,1,p2,y[1])!=num[1]+num[2]+num[4]+num[5]) return;    printf(&quot;%.10lf %.10lf\n%.10lf %.10lf\n&quot;,x[0]+0.5,x[1]+0.5,y[0]+0.5,y[1]+0.5);    exit(0);}void solve(){    do    {        check();    }    while (next_permutation(num+1,num+10));    printf(&quot;-1\n&quot;);    return;}</code></pre><h1 id="codeforces585C"><a href="#codeforces585C" class="headerlink" title="codeforces585C"></a><a href="http://codeforces.com/problemset/problem/585/C" target="_blank" rel="noopener">codeforces585C</a></h1><h2 id="description"><a href="#description" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>$a=1,b=1$，构造一个AB字符串，遇到Ａ执行$b=a+b$，遇到Ｂ执行$a=a+b$<br>要求最终$a=x ,b=y$<br><strong>data limit</strong> $x,y&lt;=1e18$</p></blockquote><h2 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>从终态逆推，容易发现是在执行辗转相减，运用辗转相除求gcd的过程加速辗转相减<br>注意$gcd(x,y)!=1$是无解</p></blockquote><hr><h1 id="codeforces585E"><a href="#codeforces585E" class="headerlink" title="codeforces585E"></a><a href="http://codeforces.com/problemset/problem/585/E" target="_blank" rel="noopener">codeforces585E</a></h1><h2 id="description-1"><a href="#description-1" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>有n个数，可以从中任意选取一个x，然后可以从剩下的数中选取任意个构成一个集合S，使集合S中所有数的$gcd(S)&gt;1$，且$gcd(gcd(S),x)=1$，求方案数。</p></blockquote><h2 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>先用$tmp[i]$表示$i$的倍数有几个，</p><p>对于每个质数$x$，选出$x$的倍数(共$tmp[x]$个)，会对答案贡献$(n-tmp[x])*(2^{tmp[x]}-1)$</p><p>此时考虑$prime1\ast prime2$，在枚举$prime1,prime2$时都计算到，需要$ans-=(n-tmp[x])\ast (2^{tmp[x]}-1)$；</p><p>类似的，三个质数乘积$p\ast q\ast r$，在$p,q,r$分别加一次，$p\ast q$，$p\ast r$，$q\ast r$分别减一次，因此还要加一遍<br>若一个质因子$p$出现两遍，要么在$p$中算过，要么$gcd!=1$，因此对答案没有贡献<br>容易发现，容斥系数恰好为$-mu[x]$<br>暴枚$i$，$ans=\sum_{i}(-mu[i])\ast(2^{tmp[i]}-1)\ast(n-tmp[i])$</p></blockquote><hr><h1 id="codeforces773D"><a href="#codeforces773D" class="headerlink" title="codeforces773D"></a><a href="http://codeforces.com/problemset/problem/773/D" target="_blank" rel="noopener">codeforces773D</a></h1><h2 id="description-2"><a href="#description-2" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>给一个完全图，边有边权，求以每个点为根的内向树，使所有点到该点的距离和最小，注意，距离定义为两点之间路径边权的最小值<br>$n\leq 2000$</p></blockquote><h2 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>先要充分挖掘这棵内向树的性质：<br>一、如果存在$y-x$和$z-x$两条边，把$z-x$变为$z-y$一定<strong>不会变劣</strong>，因此，<strong>每个点最多一条入边</strong>，也就是说，这是<strong>一条链</strong><br>不妨设最优的链由根开始的权值为$w_1,w_2,w_3,\cdots,w_{n-1}$，则有$ans=\sum_{i=1}^{n-1}\min_{j=1}^iw_i$<br>这样仍旧不好处理，有一步重要的转化：设所有边权值最小为$M$，把每条边减去$M$，答案加上$M(n-1)$，此时，必有一条边<strong>权值为零</strong>，只要途经这条边，后面的值均是零<br>不妨设链上最靠前的零边为$w_k$，经过画图会发现，$\forall i\leq k-3,w_i&gt;w_{i+1}$，下面简单证一下：<br>假设存在$w_i\leq w_{i+1}$，那么可以把$e_{i+1}$直接连向$0$边一端，再从零边另一端走出，结果不劣，附图说明：<a href="https://imgchr.com/i/BLiOQf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/11/10/BLiOQf.png" alt="BLiOQf.png"></a><br>然后路径只有两种，要么由根通往$0$边某端点的路径长度，要么允许$2w$的代价瞬移至零边端点，直接对于每个点跑dij，获得$O(n^3)$的复杂度<br>改成$O(n^2)$就差一步，只需把<strong>$dis_i$初始化成最小出边的两倍</strong>，直接跑dij即可（等于说是<strong>多加入一个源点进行一轮扩展</strong>）</p></blockquote><hr><h1 id="codeforces1086D"><a href="#codeforces1086D" class="headerlink" title="codeforces1086D"></a><a href="http://codeforces.com/problemset/problem/1086/D" target="_blank" rel="noopener">codeforces1086D</a></h1><h2 id="description-3"><a href="#description-3" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>$n$个人拍成一排玩石头剪刀布，初始给定每个人的手势。进行$q$次询问，每次询问修改一个人的手势，查询有多少人可能获胜。比赛规则是进行$n-1$轮，每一轮由你指定相邻两人比拼，输者淘汰，若平局，由你指定一人淘汰。</p></blockquote><h2 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>一、手势唯一时，答案为$n$</p><p>二、手势种类为两种时，答案为获胜的手势个数</p><p>三、手势有三种时，分别考虑每一种，记种类编号为$x$，$x$可以胜过$y$，但不能胜过$z$</p><p>要使$x$能获胜，他的左右两侧分别至少出现一个$y$（$y$一定胜过$z$，$x$可以两两对峙）</p><p>具体实现用了三个$set$存不同手势，并用树状数组记录三种手势的位置。</p><p>记$yl$为最左侧的$y$，$yr$为最右侧的$y$，记$zl$为最左侧的$z$，$zr$为最右侧的$z$</p><p>如果$zl&lt;yl$，则$ans-=query(x,yl)-query(x-zl)$</p><p>如果$yr&lt;zr$，则$ans-=query(x,zr)-query(z,yr)$</p></blockquote><hr><h1 id="codeforces1086F"><a href="#codeforces1086F" class="headerlink" title="codeforces1086F"></a><a href="https://codeforces.com/problemset/1086/F" target="_blank" rel="noopener">codeforces1086F</a></h1><h2 id="description-4"><a href="#description-4" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>有$n$个着火点，每一秒与已着火的点八连通的点会着火，着火持续$t$秒，求$\sum_x\sum_ytim(x,y)$，其中$tim(x,y)$指$(x,y)$着火的时间，若$(x,y)$未着火则$tim(x,y)=0$<br>$n\leq50\ \ |x|\leq 1e8$</p><h2 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a><strong>solution</strong></h2><p>首先考虑暴力算法。会发现计算第$x$秒有几个新着火点不太容易，但计算截止第$x$秒全部着火的点相对容易得多，我们记$f(x)$为前$x$秒的着火点数量，边界$f(0)=n$，如果计算单个$x$的函数值，可以把若干个边长为$x+x+1$的正方形做面积并，这样的问题可以用扫描线解决（甚至不必写线段树，直接写$O(n^2)$暴力即可）<br>考虑计算答案，答案<script type="math/tex">ans=(t+1)f(t)-\sum_{i=1}^tf(i)</script><br>迄今为止，得到了$O(tn^2)$的算法，着重考虑少计算一些$f$值。<br>$f$值想必会有一点特殊性质，从最特殊的情况着手，考虑$n=1$，这时$f(x)=(2x+1)^2$，是一个二次函数，会不会$f$是一个二次函数？<br>这句话有一定道理，但存在漏洞，应该是一个分段二次函数，这样考虑该结论的正确性：<br>每轮变化相当于在图形外表面再<strong>镶上一圈</strong>，<strong>在正方形相交情况不改变时，呈现的就是二次函数</strong>，现在只用找出所有相交点，具体来说是$\lfloor\frac{x_i-x_j+1}{2}\rfloor$和$\lfloor\frac{y_i-y_j+1}{2}\rfloor$，一共有$O(n^2)$个<br><strong>$k+1$个不共线的点必能确定唯一的$k$次函数</strong>，由于每一段是二次函数，去每一段的前三对数，运用拉格朗日插值即可得到二次函数，运用平方和公式求部分和即可。<br>总时间复杂度$O(n^3\log n)-O(n^4)$（根据写法不同有差异）</p></blockquote><hr><h1 id="codeforces1237E"><a href="#codeforces1237E" class="headerlink" title="codeforces1237E"></a><a href="http://codeforces.com/problemset/problem/1237/E" target="_blank" rel="noopener">codeforces1237E</a></h1><h2 id="description-5"><a href="#description-5" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>询问$n$个点的符合以下要求的二叉搜索树有几个：每个点上标$1-n$的数字，互不重复，每个点左儿子的奇偶性与之相异，右儿子的奇偶性与之相同，且只有最后一层不满。</p></blockquote><h2 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>首先，仅有最后一层不满，必定为满二叉树上加若干条边得到。</p><p>其次，考虑$x$是$y$的左儿子，$x\rightarrow r\rightarrow y$，由于奇偶性不同，$size(rson(x))\mod 2=0$</p><p><img src="https://i.loli.net/2020/09/12/FGIp8h9Q6iuzxSE.png" alt="graph.png"></p><p>然后，考虑$x$是$y$的右儿子，$y\rightarrow l\rightarrow x$，由于奇偶性相同，$size(lson(x))\mod 2=1$</p><p><img src="https://i.loli.net/2020/09/12/cEOIwpgMRaPBxdJ.png" alt="graph.png"></p><p>总结一下，若一个点$x$是左儿子，$size(rson(x))\mod 2=0$，否则$size(lson(x))\mod2=1$</p><p>所以，满二叉树的最后一层节点要么是叶子，要么只有左儿子。</p><p>然后会有一个朴素的算法：由底到顶考虑满二叉树中的节点，根据上述总结判断，若不满足，答案自增，该点到根的路径上所有点的$size$自增，时间复杂度$O(nlogn)$。容易发现，只用保存$size\mod2$，自增改为$xor 1$即可，会发现答案只有$0$或$1$。</p><p>通过<del>模拟</del>思考发现，遍历完最后一层节点后，倒数第二层$size%2$均为$0$，其余不变</p><p>记$a[x]$为在$dep=x$的满二叉树上加几条边才能满足条件，$a[1]=1,a[2]=1,a[3]=2$</p><p>对于$i&gt;3$，有$a[i]=a[i-2]+2^{i-2}$，递推即可，当且仅当$n=dep+a[dep]\ $或$\ n=dep+a[dep]+1$时，$ans=1$</p></blockquote><hr><blockquote><h1 id="codeforces1237F"><a href="#codeforces1237F" class="headerlink" title="codeforces1237F"></a><a href="http://codeforces.com/problemset/problem/1237/F" target="_blank" rel="noopener">codeforces1237F</a></h1><h2 id="description-6"><a href="#description-6" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>一个$n*m$的网格，$ban$掉了若干行与若干列，问摆放任意多张$1\ast 2$的矩形，且每行每列中不存在两个格子属于不同的矩形的方案数，对$998244353$取模</p><p>$n&lt;=3600$</p></blockquote><h2 id="solution-9"><a href="#solution-9" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>很好的$dp$计数题。</p><p>首先考虑枚举横向的矩形个数$x$，与纵向的矩形个数$y$，则我们需要$x+y+y$个空行，且有$y$组连续的空行，列同理。这个东西似乎不好处理，但如果先考虑有$y$组连续的空行，剩下的$x$行仅仅是一个组合数而已。</p><p>定义$dp[x][y]$为考虑前$x$行，取了$y$组连续两个的空行的方案数，转移很方便：</p><script type="math/tex; mode=display">dp[x][y]=dp[x-1][y]</script><script type="math/tex; mode=display">dp[x][y]+=dp[x-2][y-1]*[!ban[x]\ \wedge \ !ban[x-1]\ \wedge x>=2\ \wedge y>=1]</script><p>再定义$dp_{row}[x][y]$为$y$组连续两个的空行，$x$个空行的方案数：</p><script type="math/tex; mode=display">dp_{row}[x][y]=dp[n][y]*\binom{n-ban-y-y}{x}</script><p>列同理……</p><p>统计答案时，横向矩形之间可以交换位置，方案数为$x!$</p><script type="math/tex; mode=display">ans=\sum_{x=0}^{n/2}\sum_{y=0}^{m/2}dp_{row}[x][y]*dp_{col}[y][x]*x!*y!</script></blockquote></blockquote><hr><h1 id="codeforces1243D"><a href="#codeforces1243D" class="headerlink" title="codeforces1243D"></a><a href="http://codeforces.com/problemset/problem/1243/D" target="_blank" rel="noopener">codeforces1243D</a></h1><h2 id="description-7"><a href="#description-7" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>$n$个点的完全无向图，$m$条边边权为1，其余边权为0，求最小生成树</p><p>$n,m&lt;=1e5$</p></blockquote><h2 id="solution-10"><a href="#solution-10" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>容易得到答案为补图的联通块个数，运用链表+bfs解决<br>每次选取一个未分配的点，从这个点 bfs。链表中存储没访问的点<br>假设当前点是 u ，如果原图上有边 u -&gt; v ，就把点 v 标记（$cover[v]=1$）。从链表头遍历，对于$cover[v]=0$的点，塞入队列，并从链表中删除。<br>注意还要把标记取消!!!<br>因为每个点和每条边都只会走一次，复杂度是$O(n+m)$ 。</p></blockquote><hr><h1 id="codeforces1247E"><a href="#codeforces1247E" class="headerlink" title="codeforces1247E"></a><a href="http://codeforces.com/problemset/problem/1247/E" target="_blank" rel="noopener">codeforces1247E</a></h1><h2 id="description-8"><a href="#description-8" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>一个n*m的矩阵，有个别位置会有石头，石头受到撞击会沿着方向撞到墙为止（每个石头会占一个格子）。你从左上角出发，只能向右或者向下走，问你走到右下角的方案数。</p></blockquote><h2 id="solution-11"><a href="#solution-11" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>先统计每个位置右边，下边有几个石头，存在$row$与$col$中</p><p>考虑动态规划，$dp[i][j][0]$表示从$(i,j)$出发向右移动至终点的方案数，$dp[i][j][1]$表示从$(i,j)$出发向下移动至终点的方案数。考虑向右移动时，最远可以移到$(i,m-row[i][j+1])$，<script type="math/tex">dp[i][j][0]=\sum_{p=j+1}^{m-row[i][j+1]}dp[i][p][1]</script></p><p>同理 <script type="math/tex">dp[i][j][1]=\sum_{p=i+1}^{n-col[i+1][j]}dp[p][j][0]</script></p><p>运用前缀和优化$dp$即可</p><p>时间复杂度$O(n^2)$</p></blockquote><hr><h1 id="codeforces1284D"><a href="#codeforces1284D" class="headerlink" title="codeforces1284D"></a><a href="http://codeforces.com/problemset/problem/1284/D" target="_blank" rel="noopener">codeforces1284D</a></h1><h2 id="description-9"><a href="#description-9" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>线段集合$A,B$分别含有$n$条线段，若存在$A_i$与$A_j$相交，但$B_i$与$B_j$不相交，输出no</p></blockquote><h2 id="solution-12"><a href="#solution-12" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>与<a href="http://codeforces.com/problemset/problem/1106/E" target="_blank" rel="noopener">cf1106E</a>预处理做法相似，类似于扫描线</p><p>对于每一段线段：</p><p>1.在$tim=sa_i$处插入$[sb_i,eb_i]$，并加入$insert$标记（即$typ=1$）</p><p>2.在$tim=ea_i+1$处删除$[sb_i,eb_i]$，并加入$remove$标记（即$typ=-1$）</p><p>把上述$2*n$个事件按$tim$排序</p><p><strong>attention：当$tim$相等时，先删除区间，再加入新的区间！！！</strong></p><p>这样的话，对于每个时间点$tim$，能够维护哪些$A$线段会覆盖$tim$。显然，这些$A$线段两两相交，因此，对应的$B$线段也必须两两相交。（<strong>核心</strong>）</p><p>区间$[a,b]$,$[c,d]$不相交，当且仅当$b&lt;c$或$d&lt;a$。</p><p>若$ea_i&lt;\max(sb)$或$sa_i&gt;\min(eb)$，则新加入的线段不满足两两相交</p><p>上述信息只需要维护两个$multiset$，一个维护插入的区间左端点$sb$，另一个维护插入的区间的右端点$eb$</p><p>上述过程仅仅考虑$A$线段相交,$B$线段不相交，还需要交换$A$,$B$后再来一次</p></blockquote><hr><h1 id="codeforces1363F"><a href="#codeforces1363F" class="headerlink" title="codeforces1363F"></a><a href="http://codeforces.com/problemset/problem/1363/F" target="_blank" rel="noopener">codeforces1363F</a></h1><h2 id="description-10"><a href="#description-10" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>给出长为n的字符串s与t，一次操作可以把s中的一个字符取出，并放置到原位置之前，试求把s变成t的最小步数</p></blockquote><h2 id="solution1"><a href="#solution1" class="headerlink" title="solution1"></a><strong>solution1</strong></h2><blockquote><p>考虑动态规划，$dp[i][j]$表示$S$中的$i$个字符与$T$中$j$个字符匹配（其中一个是另一个的后缀）的最小步数<br>边界是$dp[i][0]=0$<br>考虑转移过程：<br>（1）丢弃S中的第$i$个字符（<strong>不是下标为i</strong>），之后再用一步匹配该位置，$dp[i][j]=dp[i-1][j]+1$<br>（2）$s[i]==t[j]$时，无需操作，$dp[i][j]=dp[i-1][j-1]$<br>（3）$dp[i][j]=dp[i][j-1]$，但是想要如此转移有一个先决条件，<strong>$S$中剩下的字符中$t[j]$的个数必须比$T$中剩下的字符中$t[j]$的个数多</strong>，若在预处理阶段处理$suf[i][j]$表示$j+1—n$中字符$i$的个数，$suf_s[t[j]][i+1]&gt;suf_t[t[j]][j+1]$<br>推荐用记忆化实现<br>时间复杂度$O(n^2)$</p><h2 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a><strong>solution2</strong></h2><p>联想到$LCS$的求解<br>最初感觉$answer=n-LCS(s,t)$，但是马上会有反例：$S=abb,T=bba$,答案应为$2$<br>考虑题目限制条件，字符只能从后面移动到前面，对于$S_{i+1—n}$与$T_{j+1—n}$，一旦S中某个字符比T少，就无法匹配<br>$dp[i][j]=\max(dp[i-1][j],dp[i][j-1])$不受影响<br>转移$dp[i][j]=(dp[i-1][j-1]+1)*[s[i]==t[j]])$时必须先满足$\forall k, suf[k][i+1]&gt;=suf[k][j+1]$<br>时间复杂度$O(n^2)$ </p></blockquote><hr><h1 id="codeforces1373F"><a href="#codeforces1373F" class="headerlink" title="codeforces1373F"></a><a href="http://codeforces.com/problemset/problem/1373/F" target="_blank" rel="noopener">codeforces1373F</a></h1><h2 id="description-11"><a href="#description-11" class="headerlink" title="description"></a><strong>description</strong></h2><blockquote><p>有$n$个壶，$n$个桶，第$i$个桶可以往第$i$个壶与第$i+1$个壶里倒水(特殊的，$n$号桶可以往第1个壶内倒水)，问能否灌满所有壶</p></blockquote><h2 id="solution-13"><a href="#solution-13" class="headerlink" title="solution"></a><strong>solution</strong></h2><blockquote><p>首先，记1号桶往1号壶内倒入的水量为$S$，如果知道$S$，显然可以再$O(n)$时间内判断是否可行<br>会发现如果$1$号桶往$1$号壶倒的水过多，可能导致后面的壶倒不满了，此时需要调少该水量<br>否则，可以调高该水量<br>上述两行发现，$S$对答案的影响是单调的，可以二分实现<br>注意二分上下界不要写错<br>时间复杂度$O(nlogn)$</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;codeforces260C&quot;&gt;&lt;a href=&quot;#codeforces260C&quot; class=&quot;headerlink&quot; title=&quot;codeforces260C&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/problemset/pr
      
    
    </summary>
    
    
      <category term="题目" scheme="http://wlmayiyang.github.io/categories/%E9%A2%98%E7%9B%AE/"/>
    
      <category term="cf" scheme="http://wlmayiyang.github.io/categories/%E9%A2%98%E7%9B%AE/cf/"/>
    
    
      <category term="problems" scheme="http://wlmayiyang.github.io/tags/problems/"/>
    
      <category term="cf" scheme="http://wlmayiyang.github.io/tags/cf/"/>
    
  </entry>
  
</feed>
